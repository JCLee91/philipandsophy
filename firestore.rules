rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // ============================================
    // MVP 보안 규칙
    // ============================================
    // Custom Claims 기반 간결한 규칙
    // 관리자 설정: Firebase Functions에서 request.auth.token.admin = true 설정 필요
    // ============================================

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    // 관리자 확인: Custom Claims 사용
    function isAdminClaim() {
      return isSignedIn() && request.auth.token.admin == true;
    }

    // 주어진 participantId가 현재 사용자의 것인지 확인
    function isOwnParticipant(participantId) {
      return exists(/databases/$(database)/documents/participants/$(participantId)) &&
             get(/databases/$(database)/documents/participants/$(participantId)).data.firebaseUid == request.auth.uid;
    }

    // 현재 사용자가 관리자 Participant인지 확인
    function isAdminParticipant() {
      // firebaseUid로 participant 찾기 (모든 participants 순회)
      return isSignedIn() &&
             exists(/databases/$(database)/documents/participants/admin) &&
             get(/databases/$(database)/documents/participants/admin).data.firebaseUid == request.auth.uid &&
             get(/databases/$(database)/documents/participants/admin).data.isAdministrator == true;
    }

    // pushTokens 배열 항목 검증
    function isValidPushTokens(tokens) {
      return tokens is list &&
             tokens.size() <= 20;
    }

    function isValidWebPushSubscriptions(subscriptions) {
      return subscriptions is list &&
             subscriptions.size() <= 20;
    }

    // ============================================
    // 기수 정보 (Cohorts)
    // ============================================
    match /cohorts/{cohortId} {
      allow read: if true;              // MVP: 공개 (접근 코드 검증용)
      allow write: if isAdminClaim();   // 관리자만
    }

    // ============================================
    // 참가자 정보 (Participants)
    // ============================================
    match /participants/{participantId} {
      allow read: if isSignedIn();
      allow create: if false;           // 시스템에서만 생성

      // 업데이트: 2가지 케이스 허용
      // 1) 최초 firebaseUid 연결 (null → auth.uid)
      // 2) 기존 소유자만 허용 필드 변경
      allow update: if isSignedIn() && (
        // 간소화: 로그인한 사용자는 언제든 자신의 UID로 연결 가능
        (request.resource.data.firebaseUid == request.auth.uid &&
         request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['firebaseUid', 'updatedAt'])) ||

        // 케이스 2: 기존 소유자의 프로필 업데이트
        (
          resource.data.firebaseUid == request.auth.uid &&
          request.resource.data.diff(resource.data).affectedKeys()
            .hasOnly(['name', 'profileImage', 'profileImageCircle', 'profileBookUrl',
                     'occupation', 'bio', 'currentBookTitle', 'currentBookAuthor',
                     'currentBookCoverUrl', 'bookHistory', 'pushToken', 'pushTokenUpdatedAt',
                     'pushNotificationEnabled', 'lastActivityAt', 'pushTokens', 'webPushSubscriptions', 'updatedAt']) &&
          (!request.resource.data.keys().hasAny(['pushTokens']) ||
            isValidPushTokens(request.resource.data.pushTokens)) &&
          (!request.resource.data.keys().hasAny(['webPushSubscriptions']) ||
            isValidWebPushSubscriptions(request.resource.data.webPushSubscriptions))
        )
      );

      allow delete: if false;
    }

    // ============================================
    // 공지사항 (Notices)
    // ============================================
    match /notices/{noticeId} {
      allow read: if isSignedIn();
      allow write: if isSignedIn();   // UI 레벨에서 관리자만 버튼 표시
    }

    // ============================================
    // 다이렉트 메시지 (Messages)
    // ============================================
    match /messages/{messageId} {
      // 읽기: 로그인한 모든 사용자 허용
      //
      // 이전 규칙 (isOwnParticipant 사용)의 문제점:
      // - get() 호출로 인한 추가 Firestore 읽기 비용 (메시지 1개당 6회 읽기)
      // - Security Rules 복잡도 증가로 인한 400 에러 발생
      // - 실시간 리스너(onSnapshot) 차단 문제
      //
      // 현재 규칙:
      // - UI 레벨에서 권한 제어 (DirectMessageDialog는 otherUser 체크)
      // - 단순 로그인 검증으로 성능 및 안정성 개선
      // - 소규모 프로젝트에서는 이 정도 보안으로 충분
      allow read: if isSignedIn();

      // 생성: 본인의 participantId만 senderId로 사용
      allow create: if isSignedIn() &&
        isOwnParticipant(request.resource.data.senderId) &&
        request.resource.data.senderId is string &&
        request.resource.data.receiverId is string &&
        request.resource.data.conversationId is string &&
        ((request.resource.data.content is string && request.resource.data.content.size() > 0) ||
         (request.resource.data.imageUrl is string && request.resource.data.imageUrl.size() > 0));

      // 수정: isRead 필드만 변경 가능 (로그인한 사용자)
      // 이전 규칙의 isOwnParticipant() 제거 (read 규칙과 동일한 이유)
      allow update: if isSignedIn() &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']);

      allow delete: if false;
    }

    // ============================================
    // 독서 인증 자료 (Reading Submissions)
    // ============================================
    match /reading_submissions/{submissionId} {
      allow read: if isSignedIn();

      // 생성: 본인의 participantId만 사용
      allow create: if isSignedIn() &&
        isOwnParticipant(request.resource.data.participantId) &&
        request.resource.data.participantId is string &&
        request.resource.data.participationCode is string &&
        request.resource.data.bookTitle is string &&
        request.resource.data.bookImageUrl is string &&
        request.resource.data.review is string &&
        request.resource.data.dailyQuestion is string &&
        request.resource.data.dailyAnswer is string &&
        request.resource.data.status == 'approved';

      // 수정/삭제: 본인이 작성한 것만
      allow update, delete: if isSignedIn() &&
        isOwnParticipant(resource.data.participantId);
    }

    // ============================================
    // 사용자 메타데이터 (Users) - 향후 구현용
    // ============================================
    match /users/{userId} {
      allow read: if isSignedIn() && request.auth.uid == userId;
      allow create, update, delete: if false;
    }
  }
}
