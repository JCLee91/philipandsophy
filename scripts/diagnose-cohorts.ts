#!/usr/bin/env tsx

/**
 * Cohort Synchronization Diagnostic Script
 *
 * Checks:
 * 1. Cohort metadata (dates, programStartDate)
 * 2. Daily questions (14 questions per cohort)
 * 3. Participant count per cohort
 * 4. Notice count per cohort
 * 5. Submission count per cohort
 * 6. Daily matching data
 */

import { initializeApp, cert } from 'firebase-admin/app';
import { getFirestore } from 'firebase-admin/firestore';
import { parseISO, differenceInDays, format } from 'date-fns';
import * as path from 'path';

// Initialize Firebase Admin SDK
const serviceAccount = require(path.resolve(process.cwd(), 'firebase-service-account.json'));

initializeApp({
  credential: cert(serviceAccount),
});

const db = getFirestore();

interface Cohort {
  id: string;
  name: string;
  startDate: string;
  endDate: string;
  programStartDate?: string;
  isActive: boolean;
  dailyFeaturedParticipants?: Record<string, any>;
  [key: string]: any;
}

interface DailyQuestion {
  id: string;
  dayNumber: number;
  date: string;
  category: string;
  question: string;
  [key: string]: any;
}

async function diagnoseCohorts() {
  console.log('üîç ÏΩîÌò∏Ìä∏ ÎèôÍ∏∞Ìôî ÏßÑÎã® ÏãúÏûë...\n');

  try {
    // 1. Get all cohorts
    const cohortsSnapshot = await db.collection('cohorts').get();
    const cohorts: Cohort[] = cohortsSnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    } as Cohort));

    console.log(`üìä Ï¥ù ${cohorts.length}Í∞ú Í∏∞Ïàò Î∞úÍ≤¨\n`);
    console.log('='.repeat(80));

    for (const cohort of cohorts) {
      console.log(`\nüìñ Í∏∞Ïàò: ${cohort.name} (ID: ${cohort.id})`);
      console.log('-'.repeat(80));

      // Cohort metadata
      console.log(`\n[Î©îÌÉÄÎç∞Ïù¥ÌÑ∞]`);
      console.log(`  ‚Ä¢ ÏãúÏûëÏùº (startDate): ${cohort.startDate}`);
      console.log(`  ‚Ä¢ Ï¢ÖÎ£åÏùº (endDate): ${cohort.endDate}`);
      console.log(`  ‚Ä¢ ÌîÑÎ°úÍ∑∏Îû® ÏãúÏûëÏùº (programStartDate): ${cohort.programStartDate || '‚ùå ÎØ∏ÏÑ§Ï†ï'}`);
      console.log(`  ‚Ä¢ ÌôúÏÑ±Ìôî ÏÉÅÌÉú (isActive): ${cohort.isActive ? '‚úÖ ÌôúÏÑ±' : '‚ùå ÎπÑÌôúÏÑ±'}`);

      // Calculate program duration
      if (cohort.startDate && cohort.endDate) {
        const start = parseISO(cohort.startDate);
        const end = parseISO(cohort.endDate);
        const duration = differenceInDays(end, start) + 1;
        console.log(`  ‚Ä¢ ÌîÑÎ°úÍ∑∏Îû® Í∏∞Í∞Ñ: ${duration}Ïùº`);
      }

      // Check Daily Questions
      console.log(`\n[Daily Questions]`);
      const questionsSnapshot = await db
        .collection(`cohorts/${cohort.id}/daily_questions`)
        .orderBy('dayNumber', 'asc')
        .get();
      const questions: DailyQuestion[] = questionsSnapshot.docs.map(doc => ({
        id: doc.id,
        ...doc.data()
      } as DailyQuestion));

      if (questions.length === 0) {
        console.log(`  ‚ùå Daily Questions ÏóÜÏùå`);
      } else {
        console.log(`  ‚úÖ ${questions.length}Í∞ú ÏßàÎ¨∏ Ï°¥Ïû¨ (ÏòàÏÉÅ: 14Í∞ú)`);

        if (questions.length !== 14) {
          console.log(`  ‚ö†Ô∏è  Ï£ºÏùò: 14Í∞úÍ∞Ä ÏïÑÎãå ${questions.length}Í∞ú ÏßàÎ¨∏ Î∞úÍ≤¨`);
        }

        // Check date consistency
        const programStart = cohort.programStartDate || cohort.startDate;
        if (programStart) {
          const startDate = parseISO(programStart);
          const dateIssues: string[] = [];

          questions.forEach(q => {
            const expectedDate = format(
              new Date(startDate.getTime() + (q.dayNumber - 1) * 24 * 60 * 60 * 1000),
              'yyyy-MM-dd'
            );
            if (q.date !== expectedDate) {
              dateIssues.push(`Day ${q.dayNumber}: ${q.date} (ÏòàÏÉÅ: ${expectedDate})`);
            }
          });

          if (dateIssues.length > 0) {
            console.log(`  ‚ö†Ô∏è  ÎÇ†Ïßú Î∂àÏùºÏπò Î∞úÍ≤¨:`);
            dateIssues.forEach(issue => console.log(`     - ${issue}`));
          } else {
            console.log(`  ‚úÖ Î™®Îì† ÎÇ†ÏßúÍ∞Ä programStartDateÏôÄ ÏùºÏπò`);
          }
        }

        // Show sample questions
        console.log(`\n  [Ï≤´ 3Í∞ú ÏßàÎ¨∏ ÏÉòÌîå]`);
        questions.slice(0, 3).forEach(q => {
          console.log(`    Day ${q.dayNumber} (${q.date}): ${q.question.substring(0, 50)}...`);
        });
      }

      // Check Participants
      console.log(`\n[Ï∞∏Í∞ÄÏûê]`);
      const participantsSnapshot = await db
        .collection('participants')
        .where('cohortId', '==', cohort.id)
        .get();
      console.log(`  ‚Ä¢ Ï∞∏Í∞ÄÏûê Ïàò: ${participantsSnapshot.size}Î™Ö`);

      // Check admin count
      const admins = participantsSnapshot.docs.filter(doc => {
        const data = doc.data();
        return data.isAdministrator === true || data.isSuperAdmin === true;
      });
      console.log(`  ‚Ä¢ Í¥ÄÎ¶¨Ïûê Ïàò: ${admins.length}Î™Ö`);

      // Check Notices
      console.log(`\n[Í≥µÏßÄÏÇ¨Ìï≠]`);
      const noticesSnapshot = await db
        .collection('notices')
        .where('cohortId', '==', cohort.id)
        .get();
      console.log(`  ‚Ä¢ Í≥µÏßÄÏÇ¨Ìï≠ Ïàò: ${noticesSnapshot.size}Í∞ú`);

      // Check Reading Submissions
      console.log(`\n[ÎèÖÏÑú Ïù∏Ï¶ù]`);
      const submissionsSnapshot = await db.collection('reading_submissions').get();
      const cohortSubmissions = submissionsSnapshot.docs.filter(doc => {
        const participantId = doc.data().participantId;
        return participantsSnapshot.docs.some(p => p.id === participantId);
      });
      console.log(`  ‚Ä¢ ÎèÖÏÑú Ïù∏Ï¶ù Ïàò: ${cohortSubmissions.length}Í∞ú`);

      // Check Daily Featured Participants (Matching Data)
      console.log(`\n[Îß§Ïπ≠ Îç∞Ïù¥ÌÑ∞]`);
      if (cohort.dailyFeaturedParticipants) {
        const matchingDates = Object.keys(cohort.dailyFeaturedParticipants);
        console.log(`  ‚úÖ ${matchingDates.length}Í∞ú ÎÇ†ÏßúÏùò Îß§Ïπ≠ Îç∞Ïù¥ÌÑ∞ Ï°¥Ïû¨`);

        if (matchingDates.length > 0) {
          console.log(`  ‚Ä¢ Ï≤´ Îß§Ïπ≠Ïùº: ${matchingDates[0]}`);
          console.log(`  ‚Ä¢ ÎßàÏßÄÎßâ Îß§Ïπ≠Ïùº: ${matchingDates[matchingDates.length - 1]}`);
        }
      } else {
        console.log(`  ‚ùå Îß§Ïπ≠ Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå`);
      }

      console.log(`\n${'='.repeat(80)}`);
    }

    console.log('\n\n‚úÖ ÏßÑÎã® ÏôÑÎ£å\n');

    // Summary
    console.log('üìã ÏöîÏïΩ:');
    console.log(`  ‚Ä¢ Ï¥ù Í∏∞Ïàò: ${cohorts.length}Í∞ú`);
    console.log(`  ‚Ä¢ ÌôúÏÑ± Í∏∞Ïàò: ${cohorts.filter(c => c.isActive).length}Í∞ú`);
    console.log(`  ‚Ä¢ programStartDate ÎØ∏ÏÑ§Ï†ï: ${cohorts.filter(c => !c.programStartDate).length}Í∞ú`);

  } catch (error) {
    console.error('‚ùå ÏßÑÎã® Ï§ë Ïò§Î•ò Î∞úÏÉù:', error);
    process.exit(1);
  }
}

// Run diagnostics
diagnoseCohorts()
  .then(() => process.exit(0))
  .catch(error => {
    console.error('‚ùå Ïã§Ìñâ Ïò§Î•ò:', error);
    process.exit(1);
  });
